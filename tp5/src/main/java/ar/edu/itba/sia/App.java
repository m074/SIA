package ar.edu.itba.sia;


import ar.edu.itba.sia.Activation.ActivationFunction;
import ar.edu.itba.sia.Activation.TanH;
import ar.edu.itba.sia.Model.*;

import ar.edu.itba.sia.utils.Config;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.List;
import java.util.Properties;

import static ar.edu.itba.sia.utils.Utils.noiseData;
import static ar.edu.itba.sia.utils.Utils.printImage;

public class App {
        public static void main(String args[]) throws IOException {
            Properties props = new Properties();
            Reader prop_file;
            prop_file = new InputStreamReader(new FileInputStream("config.properties"));
            props.load(prop_file);
            System.out.println("Loading set into database..\n");
            Config config = new Config(props);


            int[][] font1= {{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x20, space
                    {0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04},   // 0x21, !
                    {0x09, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00},   // 0x22, "
                    {0x0a, 0x0a, 0x1f, 0x0a, 0x1f, 0x0a, 0x0a},   // 0x23, #
                    {0x04, 0x0f, 0x14, 0x0e, 0x05, 0x1e, 0x04},   // 0x24, $
                    {0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13},   // 0x25, %
                    {0x04, 0x0a, 0x0a, 0x0a, 0x15, 0x12, 0x0d},   // 0x26, &
                    {0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00},   // 0x27, '
                    {0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02},   // 0x28, (
                    {0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08},   // 0x29, )
                    {0x04, 0x15, 0x0e, 0x1f, 0x0e, 0x15, 0x04},   // 0x2a, *
                    {0x00, 0x04, 0x04, 0x1f, 0x04, 0x04, 0x00},   // 0x2b, +
                    {0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08},   // 0x2c, ,
                    {0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00},   // 0x2d, -
                    {0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c},   // 0x2e, .
                    {0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10},   // 0x2f, /
                    {0x0e, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0e},   // 0x30, 0
                    {0x04, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0e},   // 0x31, 1
                    {0x0e, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1f},   // 0x32, 2
                    {0x0e, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0e},   // 0x33, 3
                    {0x02, 0x06, 0x0a, 0x12, 0x1f, 0x02, 0x02},   // 0x34, 4
                    {0x1f, 0x10, 0x1e, 0x01, 0x01, 0x11, 0x0e},   // 0x35, 5
                    {0x06, 0x08, 0x10, 0x1e, 0x11, 0x11, 0x0e},   // 0x36, 6
                    {0x1f, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08},   // 0x37, 7
                    {0x0e, 0x11, 0x11, 0x0e, 0x11, 0x11, 0x0e},   // 0x38, 8
                    {0x0e, 0x11, 0x11, 0x0f, 0x01, 0x02, 0x0c},   // 0x39, 9
                    {0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00},   // 0x3a, :
                    {0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x04, 0x08},   // 0x3b, ;
                    {0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02},   // 0x3c, <
                    {0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00},   // 0x3d, =
                    {0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08},   // 0x3e, >
                    {0x0e, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04}   // 0x3f, ?
            };

            int[][] font2 = {{0x0e, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0f},   // 0x40, @
                    {0x04, 0x0a, 0x11, 0x11, 0x1f, 0x11, 0x11},   // 0x41, A
                    {0x1e, 0x11, 0x11, 0x1e, 0x11, 0x11, 0x1e},   // 0x42, B
                    {0x0e, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0e},   // 0x43, C
                    {0x1e, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1e},   // 0x44, D
                    {0x1f, 0x10, 0x10, 0x1c, 0x10, 0x10, 0x1f},   // 0x45, E
                    {0x1f, 0x10, 0x10, 0x1f, 0x10, 0x10, 0x10},   // 0x46, F
                    {0x0e, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0f},   // 0x37, G
                    {0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x11},   // 0x48, H
                    {0x0e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e},   // 0x49, I
                    {0x1f, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0c},   // 0x4a, J
                    {0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11},   // 0x4b, K
                    {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f},   // 0x4c, L
                    {0x11, 0x1b, 0x15, 0x11, 0x11, 0x11, 0x11},   // 0x4d, M
                    {0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11},   // 0x4e, N
                    {0x0e, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e},   // 0x4f, O
                    {0x1e, 0x11, 0x11, 0x1e, 0x10, 0x10, 0x10},   // 0x50, P
                    {0x0e, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0d},   // 0x51, Q
                    {0x1e, 0x11, 0x11, 0x1e, 0x14, 0x12, 0x11},   // 0x52, R
                    {0x0e, 0x11, 0x10, 0x0e, 0x01, 0x11, 0x0e},   // 0x53, S
                    {0x1f, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},   // 0x54, T
                    {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e},   // 0x55, U
                    {0x11, 0x11, 0x11, 0x11, 0x11, 0x0a, 0x04},   // 0x56, V
                    {0x11, 0x11, 0x11, 0x15, 0x15, 0x1b, 0x11},   // 0x57, W
                    {0x11, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x11},   // 0x58, X
                    {0x11, 0x11, 0x0a, 0x04, 0x04, 0x04, 0x04},   // 0x59, Y
                    {0x1f, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1f},   // 0x5a, Z
                    {0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0e},   // 0x5b, [
                    {0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01},   // 0x5c, \\
                    {0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e},   // 0x5d, ]
                    {0x04, 0x0a, 0x11, 0x00, 0x00, 0x00, 0x00},   // 0x5e, ^
                    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f}   // 0x5f, _
            };


            int[][] font3 ={
                    {0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00},   // 0x60, `
                    {0x00, 0x0e, 0x01, 0x0d, 0x13, 0x13, 0x0d},   // 0x61, a
                    {0x10, 0x10, 0x10, 0x1c, 0x12, 0x12, 0x1c},   // 0x62, b
                    {0x00, 0x00, 0x00, 0x0e, 0x10, 0x10, 0x0e},   // 0x63, c
                    {0x01, 0x01, 0x01, 0x07, 0x09, 0x09, 0x07},   // 0x64, d
                    {0x00, 0x00, 0x0e, 0x11, 0x1f, 0x10, 0x0f},   // 0x65, e
                    {0x06, 0x09, 0x08, 0x1c, 0x08, 0x08, 0x08},   // 0x66, f
                    {0x0e, 0x11, 0x13, 0x0d, 0x01, 0x01, 0x0e},   // 0x67, g
                    {0x10, 0x10, 0x10, 0x16, 0x19, 0x11, 0x11},   // 0x68, h
                    {0x00, 0x04, 0x00, 0x0c, 0x04, 0x04, 0x0e},   // 0x69, i
                    {0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0c},   // 0x6a, j
                    {0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12},   // 0x6b, k
                    {0x0c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},   // 0x6c, l
                    {0x00, 0x00, 0x0a, 0x15, 0x15, 0x11, 0x11},   // 0x6d, m
                    {0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11},   // 0x6e, n
                    {0x00, 0x00, 0x0e, 0x11, 0x11, 0x11, 0x0e},   // 0x6f, o
                    {0x00, 0x1c, 0x12, 0x12, 0x1c, 0x10, 0x10},   // 0x70, p
                    {0x00, 0x07, 0x09, 0x09, 0x07, 0x01, 0x01},   // 0x71, q
                    {0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10},   // 0x72, r
                    {0x00, 0x00, 0x0f, 0x10, 0x0e, 0x01, 0x1e},   // 0x73, s
                    {0x08, 0x08, 0x1c, 0x08, 0x08, 0x09, 0x06},   // 0x74, t
                    {0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d},   // 0x75, u
                    {0x00, 0x00, 0x11, 0x11, 0x11, 0x0a, 0x04},   // 0x76, v
                    {0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0a},   // 0x77, w
                    {0x00, 0x00, 0x11, 0x0a, 0x04, 0x0a, 0x11},   // 0x78, x
                    {0x00, 0x11, 0x11, 0x0f, 0x01, 0x11, 0x0e},   // 0x79, y
                    {0x00, 0x00, 0x1f, 0x02, 0x04, 0x08, 0x1f},   // 0x7a, z
                    {0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06},   // 0x7b, {
                    {0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04},   // 0x7c, |
                    {0x0c, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0c},   // 0x7d, }
                    {0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00},   // 0x7e, ~
                    {0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f}   // 0x7f, DEL
            };


            Font[] letters = new Font[font2.length];
            double[][] inputData = new double[32][35];


            switch (config.algorithm) {
                case "ae":
                    for(int i = 0; i<letters.length; i++){
                        letters[i] = new Font(font2[i], 7, 5);
                    }
                    for(int i=0; i<32; i++){
                        for(int j=0; j<letters[i].getFontAsArray().length; j++){
                            inputData[i][j] = letters[i].getFontAsArray()[j];
                        }
                    }

                    int[][] layerConfigs = {config.get_layers()};

                    //ActivationFunction[] hiddenActivations = {new TanH(), new TanH(),new TanH(), new TanH(), new TanH()};
                    //AutoEncoder AC= new AutoEncoder(0.001, 35, 35, layerConfigs[0], new TanH(), hiddenActivations, new TanH(), true);
                    AutoEncoder AC= new AutoEncoder(0.001, 35, 35, layerConfigs[0], new TanH(), true);

                    for(int[] layerConfig: layerConfigs){
                        AC.train(inputData, inputData, config.epochs, 0.7);
                        System.out.println("Error tras entrenamiento: " + AC.getError(inputData, inputData));
                    }
                case "dae":
                    double[] noisePercentage = {config.noise};
                    int[][] layerConfigs2 = { config.get_layers()};


                    ActivationFunction[] hiddenActivations = {new TanH(), new TanH(), new TanH(), new TanH(), new TanH(), new TanH(), new TanH()};

                    //AutoEncoder AC= new AutoEncoder(0.001, 35, 35, layerConfigs[0], new TanH(), hiddenActivations, new TanH(), true);
                    DenoisingAutoEncoder AC2 = new DenoisingAutoEncoder(0.001, 35, 35, layerConfigs2[0], new TanH(), hiddenActivations, new TanH(), true, noisePercentage);

                    for (int[] layerConfig : layerConfigs2) {
                        //AC = new AutoEncoder(0.001, 35, 35, layerConfig, new TanH(), true);
                        AC2.train(inputData, inputData, 500, 0.7);
                        //  System.out.println("Error tras entrenamiento: " + AC.getError(inputData, inputData));
                    }


                    double[][] noiseData = noiseData(inputData, 20);
                    String fontVals = " !\"#$%&'()*+,-./0123456789:;<=>?";


                    double err = 0;
                    System.out.println("entrada con ruido 0%");
                    noiseData = noiseData(inputData, 0);
                    err = 0;
                    for (int i = 0; i < fontVals.length(); i++) {
                        List<Double> layer = AC2.evaluate(noiseData[i]);
                        for (int j = 0; j < layer.size(); j++) {
                            err += Math.pow(inputData[i][j] - layer.get(j), 2);
                        }
                    }
                    err = err / inputData[0].length;
                    System.out.println("error " + err);


                    for(int i =0; i<fontVals.length(); i++){
                        List<Double> layer = AC2.evaluate(noiseData[i]);
                        System.out.println("entra");
                        printImage(noiseData[i],5);
                        System.out.println("sale");
                        printImage(layer,35,5);
                        System.out.println("------------");
                    }
                case "vae":
                    int[][] faces= {{0x00, 0x0A, 0x0A, 0x00, 0x11, 0x0E, 0x00},   // :)
                            {0x00, 0x0A, 0x0A, 0x00, 0x1F, 0x11, 0x0E},  // :D
                            {0x00, 0x0A, 0x0A, 0x00, 0x0E, 0x11, 0x00}, // :(
                            {0x00, 0x0A, 0x0A, 0x00, 0x0E, 0x11, 0x1F}, // D:
                            {0x00, 0x0A, 0x0A, 0x00, 0x00, 0x1F, 0x00}, // :|
                            {0x00, 0x0A, 0x0A, 0x00, 0x11, 0x1F, 0x11}, // :I
                            {0x00, 0x0A, 0x0A, 0x00, 0x1F, 0x05, 0x02}, // :P
                            {0x00, 0x0A, 0x0A, 0x00, 0x0E, 0x11, 0x0E}, // :O
                            {0x00, 0x08, 0x0B, 0x00, 0x11, 0x0E, 0x00}, // ;)
                            {0x00, 0x08, 0x0A, 0x00, 0x1F, 0x15, 0x0A},  // :B
                            {0x00, 0x08, 0x0A, 0x00, 0x0A, 0x04, 0x00},   // c:
                            {0x00, 0x08, 0x0A, 0x00, 0x04, 0x0A, 0x00},   // :c
                            {0x00, 0x08, 0x0A, 0x00, 0x15, 0x0A, 0x00},   // :3
                            {0x00, 0x08, 0x0A, 0x00, 0x0A, 0x15, 0x00},   // 3:
                            {0x00, 0x08, 0x0A, 0x00, 0x11, 0x1F, 0x00},   // :]
                            {0x00, 0x08, 0x0A, 0x00, 0x1F, 0x11, 0x00},   // :[
                            {0x00, 0x08, 0x0B, 0x00, 0x1F, 0x11, 0x0E},// ;D
                    };

                    Font[] letters3 = new Font[faces.length];
                    double[][] inputData2 = new double[17][35];

                    for(int i = 0; i<letters.length; i++){
                        letters[i] = new Font(faces[i], 7, 5);
                    }
                    for(int i=0; i<17; i++){
                        for(int j=0; j<letters[i].getFontAsArray().length; j++){
                            inputData2[i][j] = letters[i].getFontAsArray()[j];
                        }
                    }

                    int[][] layerConfigs3 = { config.get_layers()};
                    AutoEncoder AC3= new AutoEncoder(0.001, 35, 35, layerConfigs3[0], new TanH(), false);;
                    for(int[] layerConfig: layerConfigs3){
                        AC3 = new AutoEncoder(0.001, 35, 35, layerConfig, new TanH(), true);
                        AC3.train(inputData, inputData, 20000, 0.7);
                        System.out.println("Error tras entrenamiento: " + AC3.getError(inputData, inputData));
                    }

                    double[][] latentSpace = new double[7][2];
                    for(int i =0; i<latentSpace.length; i++){
                        List<Double> layer = AC3.evaluateLatentSpace(inputData[i]);
                        latentSpace[i][0] = layer.get(0);
                        latentSpace[i][1] = layer.get(1);
                    }


                    String[] fontVals2 = {":)", ":D", ":(", "D:", ":|", ":I", ":P", ":O", ";)", ":B", "c:", ":c", ":3", "3:", ":]", ":[", ";D"};

                    //si me da ! y 1 en la misma neurona

                    List<Double> six = AC3.evaluateLatentSpace(inputData[6]);
                    List<Double> ampersand = AC3.evaluateLatentSpace(inputData[7]);

                    double x =  (six.get(0) + ampersand.get(0))/2;
                    double y = (six.get(1) + ampersand.get(1))/2;

                    double xleft = (six.get(0) + x) / 2;
                    double yleft= (six.get(1) + y)/2;

                    double xright = (x + ampersand.get(0)) / 2;
                    double yright = (y + ampersand.get(1)) / 2;

                    printImage(AC3.evaluate(new double[]{six.get(0), six.get(1)}, 3, 6), 35, 5);
                    printImage(AC3.evaluate(new double[]{xleft,yleft}, 3, 6), 35, 5);
                    printImage(AC3.evaluate(new double[]{x,y}, 3, 6), 35, 5);
                    printImage(AC3.evaluate(new double[]{xright,yright}, 3, 6), 35, 5);
                    printImage(AC3.evaluate(new double[]{ampersand.get(0), ampersand.get(1)}, 3, 6), 35, 5);
                default:

            }
        }
}
